apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.0'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testStagingUnitTest', 'createStagingCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$[0-9].*'
    ]
    def stagingTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/staging", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories = files([mainSrc])
    classDirectories = files([stagingTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testStagingUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.example.pscurzytek.popularmovies"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "MOVIE_DATABASE_BASE_URL", "\"https://api.themoviedb.org/3/movie\"")
            buildConfigField("String", "MOVIE_DATABASE_API_KEY", getKey("RELEASE.MOVIE_DATABASE_API_KEY"))
        }
        debug {
            minifyEnabled false
            buildConfigField("String", "MOVIE_DATABASE_BASE_URL", "\"https://api.themoviedb.org/3/movie\"")
            buildConfigField("String", "MOVIE_DATABASE_API_KEY", getKey("DEBUG.MOVIE_DATABASE_API_KEY"))
            testCoverageEnabled true
        }
        staging {
            signingConfig signingConfigs.debug
            minifyEnabled false
            buildConfigField("String", "MOVIE_DATABASE_BASE_URL", "\"http://localhost:8080\"")
            buildConfigField("String", "MOVIE_DATABASE_API_KEY", "\"1234567890\"")
            testCoverageEnabled true
        }
    }
    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
        jcenter()
    }
    lintOptions {
        abortOnError false
    }
    testBuildType "staging"
}

static def getKey(String key) {
    Properties props = new Properties()
    File keysFile = new File('keys.properties')
    if (keysFile.isFile()) {
        props.load(new FileInputStream(keysFile))
        return props[key]
    }
    return "\"\""
}

dependencies {
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.github.jkcclemens:khttp:0.1.0'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.0.2'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'org.testng:testng:6.9.6'
    testImplementation 'com.github.tomakehurst:wiremock:2.14.0'
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}
